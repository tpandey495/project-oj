name: Deploy to EC2 using ECR

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ${{ secrets.AWS_REGION }}

      - name: Build Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG .
          echo $IMAGE_TAG > image_tag.txt

      - name: Push Docker image to Amazon ECR
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          docker tag ${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download SSH key
        run: echo "${{ secrets.EC2_SSH_KEY }}" > deploy_key.pem
        shell: bash

      - name: Set permissions for SSH key
        run: chmod 600 deploy_key.pem

      - name: Copy Docker Compose file to EC2
        run: |
          scp -i deploy_key.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:~/docker-compose.yml

      - name: SSH and deploy to EC2
        run: |
          IMAGE_TAG=$(cat image_tag.txt)
          ssh -i deploy_key.pem -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
          echo "Deploying new Docker image..."
          export IMAGE_TAG=$(cat ~/image_tag.txt)
          docker-compose -f ~/docker-compose.yml up -d
          EOF
        shell: bash
